import time
from colorama import Fore, Style, init

# Initialize colorama
init()

def slow_print(text, color=Fore.WHITE, delay=0.1):
    for char in text:
        print(color + char, end='', flush=True)
        time.sleep(delay)
    print(Style.RESET_ALL)

def introduction():
    slow_print("Welcome to the More Advanced Python Tutorial!", Fore.CYAN)
    slow_print("You will learn about generators, context managers, metaclasses, concurrency with asyncio, and advanced OOP concepts like multiple inheritance and mixins.", Fore.CYAN)
    slow_print("Let's explore deeper Python concepts!\n", Fore.CYAN)

def section_generators():
    slow_print("1. Generators", Fore.YELLOW)
    slow_print("Generators are a way to create iterators with a sequence of values.", Fore.YELLOW)
    slow_print("Example:", Fore.YELLOW)
    slow_print("def count_up_to(max):", Fore.GREEN)
    slow_print("    count = 1", Fore.GREEN)
    slow_print("    while count <= max:", Fore.GREEN)
    slow_print("        yield count", Fore.GREEN)
    slow_print("        count += 1", Fore.GREEN)
    slow_print("counter = count_up_to(5)", Fore.GREEN)
    slow_print("for number in counter:", Fore.GREEN)
    slow_print("    print(number)  # Output: 1 2 3 4 5", Fore.GREEN)
    slow_print("\n")

def section_context_managers():
    slow_print("2. Context Managers", Fore.YELLOW)
    slow_print("Context managers allow you to allocate and release resources precisely when you want to.", Fore.YELLOW)
    slow_print("Example:", Fore.YELLOW)
    slow_print("class MyContextManager:", Fore.GREEN)
    slow_print("    def __enter__(self):", Fore.GREEN)
    slow_print("        print('Entering the context')", Fore.GREEN)
    slow_print("    def __exit__(self, exc_type, exc_val, exc_tb):", Fore.GREEN)
    slow_print("        print('Exiting the context')", Fore.GREEN)
    slow_print("with MyContextManager():", Fore.GREEN)
    slow_print("    print('Inside the context')", Fore.GREEN)
    slow_print("\n")

def section_metaclasses():
    slow_print("3. Metaclasses", Fore.YELLOW)
    slow_print("Metaclasses are classes of classes that define how a class behaves.", Fore.YELLOW)
    slow_print("Example:", Fore.YELLOW)
    slow_print("class Meta(type):", Fore.GREEN)
    slow_print("    def __new__(cls, name, bases, dct):", Fore.GREEN)
    slow_print("        print(f'Creating class {name}')", Fore.GREEN)
    slow_print("        return super().__new__(cls, name, bases, dct)", Fore.GREEN)
    slow_print("class MyClass(metaclass=Meta):", Fore.GREEN)
    slow_print("    pass", Fore.GREEN)
    slow_print("instance = MyClass()  # Output: Creating class MyClass", Fore.GREEN)
    slow_print("\n")

def section_asyncio():
    slow_print("4. Concurrency with asyncio", Fore.YELLOW)
    slow_print("asyncio is a library to write concurrent code using the async/await syntax.", Fore.YELLOW)
    slow_print("Example:", Fore.YELLOW)
    slow_print("import asyncio", Fore.GREEN)
    slow_print("async def say_hello():", Fore.GREEN)
    slow_print("    await asyncio.sleep(1)", Fore.GREEN)
    slow_print("    print('Hello!')", Fore.GREEN)
    slow_print("async def main():", Fore.GREEN)
    slow_print("    await asyncio.gather(say_hello(), say_hello())", Fore.GREEN)
    slow_print("asyncio.run(main())  # Output: Hello! Hello!", Fore.GREEN)
    slow_print("\n")

def section_multiple_inheritance():
    slow_print("5. Multiple Inheritance and Mixins", Fore.YELLOW)
    slow_print("Multiple inheritance is a feature where a class can inherit attributes and methods from more than one parent class.", Fore.YELLOW)
    slow_print("Mixins are a form of multiple inheritance where classes are used to add optional features.", Fore.YELLOW)
    slow_print("Example:", Fore.YELLOW)
    slow_print("class A:", Fore.GREEN)
    slow_print("    def method_a(self):", Fore.GREEN)
    slow_print("        return 'A'", Fore.GREEN)
    slow_print("class B:", Fore.GREEN)
    slow_print("    def method_b(self):", Fore.GREEN)
    slow_print("        return 'B'", Fore.GREEN)
    slow_print("class C(A, B):", Fore.GREEN)
    slow_print("    pass", Fore.GREEN)
    slow_print("c = C()", Fore.GREEN)
    slow_print("print(c.method_a())  # Output: A", Fore.GREEN)
    slow_print("print(c.method_b())  # Output: B", Fore.GREEN)
    slow_print("\n")

def quiz():
    score = 0
    total_questions = 5

    slow_print("Quiz Time! Answer the following questions:", Fore.CYAN)

    # Question 1
    answer = input(Fore.WHITE + "1. What keyword is used to create a generator function? ")
    if answer.lower() == "yield":
        score += 1
        slow_print("Correct!", Fore.GREEN)
    else:
        slow_print("Incorrect. The correct answer is 'yield'.", Fore.RED)

    # Question 2
    answer = input(Fore.WHITE + "2. What are context managers used for? ")
    if "allocate and release resources" in answer.lower():
        score += 1
        slow_print("Correct!", Fore.GREEN)
    else:
        slow_print("Incorrect. Context managers are used to allocate and release resources.", Fore.RED)

    # Question 3
    answer = input(Fore.WHITE + "3. What is a metaclass in Python? ")
    if "class of a class" in answer.lower():
        score += 1
        slow_print("Correct!", Fore.GREEN)
    else:
        slow_print("Incorrect. A metaclass is a class of a class that defines how a class behaves.", Fore.RED)

    # Question 4
    answer = input(Fore.WHITE + "4. What library in Python is used for concurrency with async/await syntax? ")
    if answer.lower() == "asyncio":
        score += 1
        slow_print("Correct!", Fore.GREEN)
    else:
        slow_print("Incorrect. The correct answer is 'asyncio'.", Fore.RED)

    # Question 5
    answer = input(Fore.WHITE + "5. What is multiple inheritance? ")
    if "inherit from more than one parent class" in answer.lower():
        score += 1
        slow_print("Correct!", Fore.GREEN)
    else:
        slow_print("Incorrect. Multiple inheritance is when a class can inherit attributes and methods from more than one parent class.", Fore.RED)

    slow_print(f"\nYour score is {score}/{total_questions}", Fore.CYAN)
    if score == total_questions:
        slow_print("Excellent! You got all questions right!", Fore.GREEN)
    elif score >= total_questions / 2:
        slow_print("Good job! You passed the quiz!", Fore.YELLOW)
    else:
        slow_print("You need more practice. Review the tutorial and try again.", Fore.RED)

def main():
    introduction()
    section_generators()
    section_context_managers()
    section_metaclasses()
    section_asyncio()
    section_multiple_inheritance()
    quiz()

if __name__ == "__main__":
    main()
